{
    "contractName": "SimpleToken",
    "abi": [
        {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }
            ],
            "name": "allowance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "decimals",
            "outputs": [
                {
                    "internalType": "uint8",
                    "name": "",
                    "type": "uint8"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "subtractedValue",
                    "type": "uint256"
                }
            ],
            "name": "decreaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "addedValue",
                    "type": "uint256"
                }
            ],
            "name": "increaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "recipient",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "recipient",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. Note they can later distribute these tokens as they wish using `transfer` and other `ERC20` functions.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Constructor that gives _msgSender() all of existing tokens.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"title\":\"SimpleToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/christophercruttenden/openzeppelin-contracts/contracts/examples/SimpleToken.sol\":\"SimpleToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/christophercruttenden/openzeppelin-contracts/contracts/GSN/Context.sol\":{\"keccak256\":\"0x9897c91255b49f4e3077ab5e41f8b25697b6506dc19138ad20c83be77ae021d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6eddc83e7767302017fed60794dac4ca76bad17dbba9d6bd8f58553171e6398\",\"dweb:/ipfs/QmP3uWNgBMKrVtPtt1zn4bbgBC4c1nRU1K8cU7rwKnvvrX\"]},\"/Users/christophercruttenden/openzeppelin-contracts/contracts/examples/SimpleToken.sol\":{\"keccak256\":\"0xb33961072cf7c3f795cc9d5c643bce1afc0ee0c24cfc263d0ecfb2908e957f78\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://586507b92fcdb9e16d60b2ef8d1528e5634c22b4383a0a1dc6dc200fb4e11f4b\",\"dweb:/ipfs/QmPrawcvxzRAyyHmVeWRjwntcun96QbrcexQCtVNSahPb7\"]},\"/Users/christophercruttenden/openzeppelin-contracts/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xef7bf556e020e85da9eb98c5d8b3cf9142f72c65e833480107ef23300407ba81\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6937234ece6c782c1cf081908c4c4b0bb5d9cc935f3eef4532ce8518eb194dc\",\"dweb:/ipfs/QmaZUhYbv4GBpH3aJwCHMcrBcLGdt4tt7desCzc1rsN1uz\"]},\"/Users/christophercruttenden/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x2b2320ea2b6799debfa98b8b929c3c4287a472d2ae68b7e9af5b1795e293b96c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3fd551dbc02c0265b3c5deb24a336399d2c3b6c27b7cf227648ed6bcae553605\",\"dweb:/ipfs/QmXjfWXJGa4NcrJp1ZmLqtPjqgmjrfDSyCu7PvqBWGUeyj\"]},\"/Users/christophercruttenden/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd91cdb05403935ffdcfc76f70ee8109260dcd993a4214b7355870322d7d6515\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc998b5e9fba9bf4b8c3e1c9d964fb631be33c3322ae8c97ddf7434cbe461ed5\",\"dweb:/ipfs/QmXKJrUW57mNjuyTvieoXRtP8agtnp1JF6fjqZhqRta2Ta\"]}},\"version\":1}",
    "bytecode": "60806040523480156200001157600080fd5b506040518060400160405280600b81526020016a29b4b6b83632aa37b5b2b760a91b8152506040518060400160405280600381526020016253494d60e81b815250601282600390805190602001906200006c92919062000215565b5081516200008290600490602085019062000215565b506005805460ff191660ff9290921691909117905550620000d69050620000a8620000dc565b620000b2620000e0565b620000c29060ff16600a6200039a565b620000d09061271062000482565b620000e9565b620004f7565b3390565b60055460ff1690565b6001600160a01b0382166200011b5760405162461bcd60e51b81526004016200011290620002f2565b60405180910390fd5b6200012960008383620001d5565b6200014581600254620001da60201b620003f81790919060201c565b6002556001600160a01b0382166000908152602081815260409091205462000178918390620003f8620001da821b17901c565b6001600160a01b0383166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90620001c990859062000329565b60405180910390a35050565b505050565b600080620001e9838562000332565b9050838110156200020e5760405162461bcd60e51b81526004016200011290620002bb565b9392505050565b8280546200022390620004a4565b90600052602060002090601f01602090048101928262000247576000855562000292565b82601f106200026257805160ff191683800117855562000292565b8280016001018555821562000292579182015b828111156200029257825182559160200191906001019062000275565b50620002a0929150620002a4565b5090565b5b80821115620002a05760008155600101620002a5565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60008219821115620003485762000348620004e1565b500190565b80825b600180861162000361575062000391565b818704821115620003765762000376620004e1565b808616156200038457918102915b9490941c93800262000350565b94509492505050565b60006200020e6000198484600082620003b6575060016200020e565b81620003c5575060006200020e565b8160018114620003de5760028114620003e9576200041d565b60019150506200020e565b60ff841115620003fd57620003fd620004e1565b6001841b915084821115620004165762000416620004e1565b506200020e565b5060208310610133831016604e8410600b841016171562000455575081810a838111156200044f576200044f620004e1565b6200020e565b6200046484848460016200034d565b808604821115620004795762000479620004e1565b02949350505050565b60008160001904831182151516156200049f576200049f620004e1565b500290565b600281046001821680620004b957607f821691505b60208210811415620004db57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6109ed80620005076000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b411461014f578063a457c2d714610157578063a9059cbb1461016a578063dd62ed3e1461017d576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ec57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610190565b6040516100c39190610715565b60405180910390f35b6100df6100da3660046106e1565b610222565b6040516100c3919061070a565b6100f461023f565b6040516100c391906108ad565b6100df61010f3660046106a6565b610245565b61011c6102cc565b6040516100c391906108b6565b6100df6101373660046106e1565b6102d5565b6100f461014a36600461065a565b610323565b6100b6610342565b6100df6101653660046106e1565b610351565b6100df6101783660046106e1565b6103b9565b6100f461018b366004610674565b6103cd565b60606003805461019f906108f3565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb906108f3565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b5050505050905090565b600061023661022f610437565b848461043b565b50600192915050565b60025490565b60006102528484846104ef565b6102c28461025e610437565b6102bd8560405180606001604052806028815260200161096b602891396001600160a01b038a1660009081526001602052604081209061029c610437565b6001600160a01b031681526020810191909152604001600020549190610604565b61043b565b5060019392505050565b60055460ff1690565b60006102366102e2610437565b846102bd85600160006102f3610437565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906103f8565b6001600160a01b0381166000908152602081905260409020545b919050565b60606004805461019f906108f3565b600061023661035e610437565b846102bd856040518060600160405280602581526020016109936025913960016000610388610437565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610604565b60006102366103c6610437565b84846104ef565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60008061040583856108c4565b9050838110156104305760405162461bcd60e51b8152600401610427906107ed565b60405180910390fd5b9392505050565b3390565b6001600160a01b0383166104615760405162461bcd60e51b815260040161042790610869565b6001600160a01b0382166104875760405162461bcd60e51b8152600401610427906107ab565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104e29085906108ad565b60405180910390a3505050565b6001600160a01b0383166105155760405162461bcd60e51b815260040161042790610824565b6001600160a01b03821661053b5760405162461bcd60e51b815260040161042790610768565b61054683838361063e565b61058381604051806060016040528060268152602001610945602691396001600160a01b0386166000908152602081905260409020549190610604565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546105b290826103f8565b6001600160a01b0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104e29085906108ad565b600081848411156106285760405162461bcd60e51b81526004016104279190610715565b50600061063584866108dc565b95945050505050565b505050565b80356001600160a01b038116811461033d57600080fd5b60006020828403121561066b578081fd5b61043082610643565b60008060408385031215610686578081fd5b61068f83610643565b915061069d60208401610643565b90509250929050565b6000806000606084860312156106ba578081fd5b6106c384610643565b92506106d160208501610643565b9150604084013590509250925092565b600080604083850312156106f3578182fd5b6106fc83610643565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b8181101561074157858101830151858201604001528201610725565b818111156107525783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b90815260200190565b60ff91909116815260200190565b600082198211156108d7576108d761092e565b500190565b6000828210156108ee576108ee61092e565b500390565b60028104600182168061090757607f821691505b6020821081141561092857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122079110f728a8cd06c09f4bc69e36cb8d31079520f4ce4e097f0b4d44d2007095264736f6c63430008000033",
    "deployedBytecode": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b411461014f578063a457c2d714610157578063a9059cbb1461016a578063dd62ed3e1461017d576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ec57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610190565b6040516100c39190610715565b60405180910390f35b6100df6100da3660046106e1565b610222565b6040516100c3919061070a565b6100f461023f565b6040516100c391906108ad565b6100df61010f3660046106a6565b610245565b61011c6102cc565b6040516100c391906108b6565b6100df6101373660046106e1565b6102d5565b6100f461014a36600461065a565b610323565b6100b6610342565b6100df6101653660046106e1565b610351565b6100df6101783660046106e1565b6103b9565b6100f461018b366004610674565b6103cd565b60606003805461019f906108f3565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb906108f3565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b5050505050905090565b600061023661022f610437565b848461043b565b50600192915050565b60025490565b60006102528484846104ef565b6102c28461025e610437565b6102bd8560405180606001604052806028815260200161096b602891396001600160a01b038a1660009081526001602052604081209061029c610437565b6001600160a01b031681526020810191909152604001600020549190610604565b61043b565b5060019392505050565b60055460ff1690565b60006102366102e2610437565b846102bd85600160006102f3610437565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906103f8565b6001600160a01b0381166000908152602081905260409020545b919050565b60606004805461019f906108f3565b600061023661035e610437565b846102bd856040518060600160405280602581526020016109936025913960016000610388610437565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610604565b60006102366103c6610437565b84846104ef565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60008061040583856108c4565b9050838110156104305760405162461bcd60e51b8152600401610427906107ed565b60405180910390fd5b9392505050565b3390565b6001600160a01b0383166104615760405162461bcd60e51b815260040161042790610869565b6001600160a01b0382166104875760405162461bcd60e51b8152600401610427906107ab565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104e29085906108ad565b60405180910390a3505050565b6001600160a01b0383166105155760405162461bcd60e51b815260040161042790610824565b6001600160a01b03821661053b5760405162461bcd60e51b815260040161042790610768565b61054683838361063e565b61058381604051806060016040528060268152602001610945602691396001600160a01b0386166000908152602081905260409020549190610604565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546105b290826103f8565b6001600160a01b0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104e29085906108ad565b600081848411156106285760405162461bcd60e51b81526004016104279190610715565b50600061063584866108dc565b95945050505050565b505050565b80356001600160a01b038116811461033d57600080fd5b60006020828403121561066b578081fd5b61043082610643565b60008060408385031215610686578081fd5b61068f83610643565b915061069d60208401610643565b90509250929050565b6000806000606084860312156106ba578081fd5b6106c384610643565b92506106d160208501610643565b9150604084013590509250925092565b600080604083850312156106f3578182fd5b6106fc83610643565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b8181101561074157858101830151858201604001528201610725565b818111156107525783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b90815260200190565b60ff91909116815260200190565b600082198211156108d7576108d761092e565b500190565b6000828210156108ee576108ee61092e565b500390565b60028104600182168061090757607f821691505b6020821081141561092857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122079110f728a8cd06c09f4bc69e36cb8d31079520f4ce4e097f0b4d44d2007095264736f6c63430008000033",
    "sourceMap": "361:252:1:-:0;;;494:117;;;;;;;;;;1953:161:3;;;;;;;;;;;;;-1:-1:-1;;;1953:161:3;;;;;;;;;;;;;;;;-1:-1:-1;;;1953:161:3;;;536:2:1;2044:5:3;2036;:13;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2059:17:3;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;2086:9:3;:21;;-1:-1:-1;;2086:21:3;;;;;;;;;;;;-1:-1:-1;550:54:1::1;::::0;-1:-1:-1;556:12:1::1;:10;:12::i;:::-;591:10;:8;:10::i;:::-;579:23;::::0;583:19:::1;;579:2;:23;:::i;:::-;570:33;::::0;:5:::1;:33;:::i;:::-;550:5;:54::i;:::-;361:252:::0;;598:113:0;693:10;598:113;:::o;3081:81:3:-;3146:9;;;;3081:81;:::o;8299:370::-;-1:-1:-1;;;;;8382:21:3;;8374:65;;;;-1:-1:-1;;;8374:65:3;;;;;;;:::i;:::-;;;;;;;;;8450:49;8479:1;8483:7;8492:6;8450:20;:49::i;:::-;8525:24;8542:6;8525:12;;:16;;;;;;:24;;;;:::i;:::-;8510:12;:39;-1:-1:-1;;;;;8580:18:3;;:9;:18;;;;;;;;;;;;:30;;8603:6;;8580:22;;;;;:30;;:::i;:::-;-1:-1:-1;;;;;8559:18:3;;:9;:18;;;;;;;;;;;:51;;;;8625:37;;8559:18;;:9;8625:37;;;;8655:6;;8625:37;:::i;:::-;;;;;;;;8299:370;;:::o;11224:121::-;;;;:::o;882:176:2:-;940:7;;971:5;975:1;971;:5;:::i;:::-;959:17;;999:1;994;:6;;986:46;;;;-1:-1:-1;;;986:46:2;;;;;;;:::i;:::-;1050:1;882:176;-1:-1:-1;;;882:176:2:o;361:252:1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;361:252:1;;;-1:-1:-1;361:252:1;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:351:5;216:2;198:21;;;255:2;235:18;;;228:30;294:29;289:2;274:18;;267:57;356:2;341:18;;188:177::o;370:355::-;572:2;554:21;;;611:2;591:18;;;584:30;650:33;645:2;630:18;;623:61;716:2;701:18;;544:181::o;730:177::-;876:25;;;864:2;849:18;;831:76::o;912:128::-;;983:1;979:6;976:1;973:13;970:2;;;989:18;;:::i;:::-;-1:-1:-1;1025:9:5;;960:80::o;1045:453::-;1141:6;1164:5;1178:314;1227:1;1264:2;1254:8;1251:16;1241:2;;1271:5;;;1241:2;1312:4;1307:3;1303:14;1297:4;1294:24;1291:2;;;1321:18;;:::i;:::-;1371:2;1361:8;1357:17;1354:2;;;1386:16;;;;1354:2;1465:17;;;;;1425:15;;1178:314;;;1122:376;;;;;;;:::o;1503:139::-;;1592:44;-1:-1:-1;;1619:8:5;1613:4;1647:922;1731:8;1721:2;;-1:-1:-1;1772:1:5;1786:5;;1721:2;1820:4;1810:2;;-1:-1:-1;1857:1:5;1871:5;;1810:2;1902:4;1920:1;1915:59;;;;1988:1;1983:183;;;;1895:271;;1915:59;1945:1;1936:10;;1959:5;;;1983:183;2020:3;2010:8;2007:17;2004:2;;;2027:18;;:::i;:::-;2083:1;2073:8;2069:16;2060:25;;2111:3;2104:5;2101:14;2098:2;;;2118:18;;:::i;:::-;2151:5;;;1895:271;;2250:2;2240:8;2237:16;2231:3;2225:4;2222:13;2218:36;2212:2;2202:8;2199:16;2194:2;2188:4;2185:12;2181:35;2178:77;2175:2;;;-1:-1:-1;2287:19:5;;;2322:14;;;2319:2;;;2339:18;;:::i;:::-;2372:5;;2175:2;2419:42;2457:3;2447:8;2441:4;2438:1;2419:42;:::i;:::-;2494:6;2489:3;2485:16;2476:7;2473:29;2470:2;;;2505:18;;:::i;:::-;2543:20;;1711:858;-1:-1:-1;;;;1711:858:5:o;2574:168::-;;2680:1;2676;2672:6;2668:14;2665:1;2662:21;2657:1;2650:9;2643:17;2639:45;2636:2;;;2687:18;;:::i;:::-;-1:-1:-1;2727:9:5;;2626:116::o;2747:380::-;2832:1;2822:12;;2879:1;2869:12;;;2890:2;;2944:4;2936:6;2932:17;2922:27;;2890:2;2997;2989:6;2986:14;2966:18;2963:38;2960:2;;;3043:10;3038:3;3034:20;3031:1;3024:31;3078:4;3075:1;3068:15;3106:4;3103:1;3096:15;2960:2;;2802:325;;;:::o;3132:127::-;3193:10;3188:3;3184:20;3181:1;3174:31;3224:4;3221:1;3214:15;3248:4;3245:1;3238:15;3164:95;361:252:1;;;;;;",
    "deployedSourceMap": "361:252:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2179:81:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4295:202;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3222:98::-;;;:::i;:::-;;;;;;;:::i;4964:439::-;;;;;;:::i;:::-;;:::i;3081:81::-;;;:::i;:::-;;;;;;;:::i;5798:289::-;;;;;;:::i;:::-;;:::i;3378:117::-;;;;;;:::i;:::-;;:::i;2373:85::-;;;:::i;6574:386::-;;;;;;:::i;:::-;;:::i;3698:208::-;;;;;;:::i;:::-;;:::i;3964:193::-;;;;;;:::i;:::-;;:::i;2179:81::-;2216:13;2248:5;2241:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2179:81;:::o;4295:202::-;4410:4;4430:39;4439:12;:10;:12::i;:::-;4453:7;4462:6;4430:8;:39::i;:::-;-1:-1:-1;4486:4:3;4295:202;;;;:::o;3222:98::-;3301:12;;3222:98;:::o;4964:439::-;5100:4;5116:36;5126:6;5134:9;5145:6;5116:9;:36::i;:::-;5162:213;5184:6;5204:12;:10;:12::i;:::-;5230:135;5285:6;5230:135;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5230:19:3;;;;;;:11;:19;;;;;;5250:12;:10;:12::i;:::-;-1:-1:-1;;;;;5230:33:3;;;;;;;;;;;;-1:-1:-1;5230:33:3;;;:135;:37;:135::i;:::-;5162:8;:213::i;:::-;-1:-1:-1;5392:4:3;4964:439;;;;;:::o;3081:81::-;3146:9;;;;3081:81;:::o;5798:289::-;5910:4;5930:129;5952:12;:10;:12::i;:::-;5978:7;5999:50;6038:10;5999:11;:25;6011:12;:10;:12::i;:::-;-1:-1:-1;;;;;5999:25:3;;;;;;;;;;;;;;;;;-1:-1:-1;5999:25:3;;;:34;;;;;;;;;;;:38;:50::i;3378:117::-;-1:-1:-1;;;;;3470:18:3;;3444:7;3470:18;;;;;;;;;;;3378:117;;;;:::o;2373:85::-;2412:13;2444:7;2437:14;;;;;:::i;6574:386::-;6691:4;6711:221;6733:12;:10;:12::i;:::-;6759:7;6780:142;6836:15;6780:142;;;;;;;;;;;;;;;;;:11;:25;6792:12;:10;:12::i;:::-;-1:-1:-1;;;;;6780:25:3;;;;;;;;;;;;;;;;;-1:-1:-1;6780:25:3;;;:34;;;;;;;;;;;:142;:38;:142::i;3698:208::-;3816:4;3836:42;3846:12;:10;:12::i;:::-;3860:9;3871:6;3836:9;:42::i;3964:193::-;-1:-1:-1;;;;;4123:18:3;;;4093:7;4123:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3964:193::o;882:176:2:-;940:7;;971:5;975:1;971;:5;:::i;:::-;959:17;;999:1;994;:6;;986:46;;;;-1:-1:-1;;;986:46:2;;;;;;;:::i;:::-;;;;;;;;;1050:1;882:176;-1:-1:-1;;;882:176:2:o;598:113:0:-;693:10;598:113;:::o;9856:370:3:-;-1:-1:-1;;;;;9987:19:3;;9979:68;;;;-1:-1:-1;;;9979:68:3;;;;;;;:::i;:::-;-1:-1:-1;;;;;10065:21:3;;10057:68;;;;-1:-1:-1;;;10057:68:3;;;;;;;:::i;:::-;-1:-1:-1;;;;;10136:18:3;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;;:36;;;10187:32;;;;;10166:6;;10187:32;:::i;:::-;;;;;;;;9856:370;;;:::o;7434:594::-;-1:-1:-1;;;;;7569:20:3;;7561:70;;;;-1:-1:-1;;;7561:70:3;;;;;;;:::i;:::-;-1:-1:-1;;;;;7649:23:3;;7641:71;;;;-1:-1:-1;;;7641:71:3;;;;;;;:::i;:::-;7723:47;7744:6;7752:9;7763:6;7723:20;:47::i;:::-;7801:105;7836:6;7801:105;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7801:17:3;;:9;:17;;;;;;;;;;;;:105;:21;:105::i;:::-;-1:-1:-1;;;;;7781:17:3;;;:9;:17;;;;;;;;;;;:125;;;;7939:20;;;;;;;:32;;7964:6;7939:24;:32::i;:::-;-1:-1:-1;;;;;7916:20:3;;;:9;:20;;;;;;;;;;;;:55;;;;7986:35;;;;;;;;;;8014:6;;7986:35;:::i;1754:217:2:-;1870:7;1905:12;1897:6;;;;1889:29;;;;-1:-1:-1;;;1889:29:2;;;;;;;;:::i;:::-;-1:-1:-1;1928:9:2;1940:5;1944:1;1940;:5;:::i;:::-;1928:17;1754:217;-1:-1:-1;;;;;1754:217:2:o;11224:121:3:-;;;;:::o;14:175:5:-;84:20;;-1:-1:-1;;;;;133:31:5;;123:42;;113:2;;179:1;176;169:12;194:198;;306:2;294:9;285:7;281:23;277:32;274:2;;;327:6;319;312:22;274:2;355:31;376:9;355:31;:::i;397:274::-;;;526:2;514:9;505:7;501:23;497:32;494:2;;;547:6;539;532:22;494:2;575:31;596:9;575:31;:::i;:::-;565:41;;625:40;661:2;650:9;646:18;625:40;:::i;:::-;615:50;;484:187;;;;;:::o;676:342::-;;;;822:2;810:9;801:7;797:23;793:32;790:2;;;843:6;835;828:22;790:2;871:31;892:9;871:31;:::i;:::-;861:41;;921:40;957:2;946:9;942:18;921:40;:::i;:::-;911:50;;1008:2;997:9;993:18;980:32;970:42;;780:238;;;;;:::o;1023:266::-;;;1152:2;1140:9;1131:7;1127:23;1123:32;1120:2;;;1173:6;1165;1158:22;1120:2;1201:31;1222:9;1201:31;:::i;:::-;1191:41;1279:2;1264:18;;;;1251:32;;-1:-1:-1;;;1110:179:5:o;1294:187::-;1459:14;;1452:22;1434:41;;1422:2;1407:18;;1389:92::o;1486:603::-;;1627:2;1656;1645:9;1638:21;1688:6;1682:13;1731:6;1726:2;1715:9;1711:18;1704:34;1756:4;1769:140;1783:6;1780:1;1777:13;1769:140;;;1878:14;;;1874:23;;1868:30;1844:17;;;1863:2;1840:26;1833:66;1798:10;;1769:140;;;1927:6;1924:1;1921:13;1918:2;;;1997:4;1992:2;1983:6;1972:9;1968:22;1964:31;1957:45;1918:2;-1:-1:-1;2073:2:5;2052:15;-1:-1:-1;;2048:29:5;2033:45;;;;2080:2;2029:54;;1607:482;-1:-1:-1;;;1607:482:5:o;2094:399::-;2296:2;2278:21;;;2335:2;2315:18;;;2308:30;2374:34;2369:2;2354:18;;2347:62;-1:-1:-1;;;2440:2:5;2425:18;;2418:33;2483:3;2468:19;;2268:225::o;2498:398::-;2700:2;2682:21;;;2739:2;2719:18;;;2712:30;2778:34;2773:2;2758:18;;2751:62;-1:-1:-1;;;2844:2:5;2829:18;;2822:32;2886:3;2871:19;;2672:224::o;2901:351::-;3103:2;3085:21;;;3142:2;3122:18;;;3115:30;3181:29;3176:2;3161:18;;3154:57;3243:2;3228:18;;3075:177::o;3257:401::-;3459:2;3441:21;;;3498:2;3478:18;;;3471:30;3537:34;3532:2;3517:18;;3510:62;-1:-1:-1;;;3603:2:5;3588:18;;3581:35;3648:3;3633:19;;3431:227::o;3663:400::-;3865:2;3847:21;;;3904:2;3884:18;;;3877:30;3943:34;3938:2;3923:18;;3916:62;-1:-1:-1;;;4009:2:5;3994:18;;3987:34;4053:3;4038:19;;3837:226::o;4068:177::-;4214:25;;;4202:2;4187:18;;4169:76::o;4250:184::-;4422:4;4410:17;;;;4392:36;;4380:2;4365:18;;4347:87::o;4439:128::-;;4510:1;4506:6;4503:1;4500:13;4497:2;;;4516:18;;:::i;:::-;-1:-1:-1;4552:9:5;;4487:80::o;4572:125::-;;4640:1;4637;4634:8;4631:2;;;4645:18;;:::i;:::-;-1:-1:-1;4682:9:5;;4621:76::o;4702:380::-;4787:1;4777:12;;4834:1;4824:12;;;4845:2;;4899:4;4891:6;4887:17;4877:27;;4845:2;4952;4944:6;4941:14;4921:18;4918:38;4915:2;;;4998:10;4993:3;4989:20;4986:1;4979:31;5033:4;5030:1;5023:15;5061:4;5058:1;5051:15;4915:2;;4757:325;;;:::o;5087:127::-;5148:10;5143:3;5139:20;5136:1;5129:31;5179:4;5176:1;5169:15;5203:4;5200:1;5193:15",
    "sourcePath": "/Users/christophercruttenden/openzeppelin-contracts/contracts/examples/SimpleToken.sol",
    "compiler": {
        "name": "solc",
        "version": "0.8.0+commit.c7dfd78e"
    },
    "ast": {
        "absolutePath": "/Users/christophercruttenden/openzeppelin-contracts/contracts/examples/SimpleToken.sol",
        "exportedSymbols": {
            "Context": [
                25
            ],
            "ERC20": [
                761
            ],
            "IERC20": [
                839
            ],
            "SafeMath": [
                256
            ],
            "SimpleToken": [
                60
            ]
        },
        "id": 61,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
            {
                "id": 27,
                "literals": [
                    "solidity",
                    ">=",
                    "0.6",
                    ".0",
                    "<",
                    "0.9",
                    ".0"
                ],
                "nodeType": "PragmaDirective",
                "src": "33:31:1"
            },
            {
                "absolutePath": "/Users/christophercruttenden/openzeppelin-contracts/contracts/GSN/Context.sol",
                "file": "../GSN/Context.sol",
                "id": 28,
                "nodeType": "ImportDirective",
                "scope": 61,
                "sourceUnit": 26,
                "src": "66:28:1",
                "symbolAliases": [],
                "unitAlias": ""
            },
            {
                "absolutePath": "/Users/christophercruttenden/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
                "file": "../token/ERC20/ERC20.sol",
                "id": 29,
                "nodeType": "ImportDirective",
                "scope": 61,
                "sourceUnit": 762,
                "src": "95:34:1",
                "symbolAliases": [],
                "unitAlias": ""
            },
            {
                "abstract": false,
                "baseContracts": [
                    {
                        "baseName": {
                            "id": 31,
                            "name": "Context",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 25,
                            "src": "385:7:1"
                        },
                        "id": 32,
                        "nodeType": "InheritanceSpecifier",
                        "src": "385:7:1"
                    },
                    {
                        "baseName": {
                            "id": 33,
                            "name": "ERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 761,
                            "src": "394:5:1"
                        },
                        "id": 34,
                        "nodeType": "InheritanceSpecifier",
                        "src": "394:5:1"
                    }
                ],
                "contractDependencies": [
                    25,
                    761,
                    839
                ],
                "contractKind": "contract",
                "documentation": {
                    "id": 30,
                    "nodeType": "StructuredDocumentation",
                    "src": "131:229:1",
                    "text": " @title SimpleToken\n @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n Note they can later distribute these tokens as they wish using `transfer` and other\n `ERC20` functions."
                },
                "fullyImplemented": true,
                "id": 60,
                "linearizedBaseContracts": [
                    60,
                    761,
                    839,
                    25
                ],
                "name": "SimpleToken",
                "nodeType": "ContractDefinition",
                "nodes": [
                    {
                        "body": {
                            "id": 58,
                            "nodeType": "Block",
                            "src": "540:71:1",
                            "statements": [
                                {
                                    "expression": {
                                        "arguments": [
                                            {
                                                "arguments": [],
                                                "expression": {
                                                    "argumentTypes": [],
                                                    "id": 44,
                                                    "name": "_msgSender",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 13,
                                                    "src": "556:10:1",
                                                    "typeDescriptions": {
                                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                                                        "typeString": "function () view returns (address payable)"
                                                    }
                                                },
                                                "id": 45,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "functionCall",
                                                "lValueRequested": false,
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "556:12:1",
                                                "tryCall": false,
                                                "typeDescriptions": {
                                                    "typeIdentifier": "t_address_payable",
                                                    "typeString": "address payable"
                                                }
                                            },
                                            {
                                                "commonType": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                },
                                                "id": 55,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                    "hexValue": "3130303030",
                                                    "id": 46,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "kind": "number",
                                                    "lValueRequested": false,
                                                    "nodeType": "Literal",
                                                    "src": "570:5:1",
                                                    "typeDescriptions": {
                                                        "typeIdentifier": "t_rational_10000_by_1",
                                                        "typeString": "int_const 10000"
                                                    },
                                                    "value": "10000"
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "*",
                                                "rightExpression": {
                                                    "components": [
                                                        {
                                                            "commonType": {
                                                                "typeIdentifier": "t_uint256",
                                                                "typeString": "uint256"
                                                            },
                                                            "id": 53,
                                                            "isConstant": false,
                                                            "isLValue": false,
                                                            "isPure": false,
                                                            "lValueRequested": false,
                                                            "leftExpression": {
                                                                "hexValue": "3130",
                                                                "id": 47,
                                                                "isConstant": false,
                                                                "isLValue": false,
                                                                "isPure": true,
                                                                "kind": "number",
                                                                "lValueRequested": false,
                                                                "nodeType": "Literal",
                                                                "src": "579:2:1",
                                                                "typeDescriptions": {
                                                                    "typeIdentifier": "t_rational_10_by_1",
                                                                    "typeString": "int_const 10"
                                                                },
                                                                "value": "10"
                                                            },
                                                            "nodeType": "BinaryOperation",
                                                            "operator": "**",
                                                            "rightExpression": {
                                                                "arguments": [
                                                                    {
                                                                        "arguments": [],
                                                                        "expression": {
                                                                            "argumentTypes": [],
                                                                            "id": 50,
                                                                            "name": "decimals",
                                                                            "nodeType": "Identifier",
                                                                            "overloadedDeclarations": [],
                                                                            "referencedDeclaration": 337,
                                                                            "src": "591:8:1",
                                                                            "typeDescriptions": {
                                                                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
                                                                                "typeString": "function () view returns (uint8)"
                                                                            }
                                                                        },
                                                                        "id": 51,
                                                                        "isConstant": false,
                                                                        "isLValue": false,
                                                                        "isPure": false,
                                                                        "kind": "functionCall",
                                                                        "lValueRequested": false,
                                                                        "names": [],
                                                                        "nodeType": "FunctionCall",
                                                                        "src": "591:10:1",
                                                                        "tryCall": false,
                                                                        "typeDescriptions": {
                                                                            "typeIdentifier": "t_uint8",
                                                                            "typeString": "uint8"
                                                                        }
                                                                    }
                                                                ],
                                                                "expression": {
                                                                    "argumentTypes": [
                                                                        {
                                                                            "typeIdentifier": "t_uint8",
                                                                            "typeString": "uint8"
                                                                        }
                                                                    ],
                                                                    "id": 49,
                                                                    "isConstant": false,
                                                                    "isLValue": false,
                                                                    "isPure": true,
                                                                    "lValueRequested": false,
                                                                    "nodeType": "ElementaryTypeNameExpression",
                                                                    "src": "583:7:1",
                                                                    "typeDescriptions": {
                                                                        "typeIdentifier": "t_type$_t_uint256_$",
                                                                        "typeString": "type(uint256)"
                                                                    },
                                                                    "typeName": {
                                                                        "id": 48,
                                                                        "name": "uint256",
                                                                        "nodeType": "ElementaryTypeName",
                                                                        "src": "583:7:1",
                                                                        "typeDescriptions": {}
                                                                    }
                                                                },
                                                                "id": 52,
                                                                "isConstant": false,
                                                                "isLValue": false,
                                                                "isPure": false,
                                                                "kind": "typeConversion",
                                                                "lValueRequested": false,
                                                                "names": [],
                                                                "nodeType": "FunctionCall",
                                                                "src": "583:19:1",
                                                                "tryCall": false,
                                                                "typeDescriptions": {
                                                                    "typeIdentifier": "t_uint256",
                                                                    "typeString": "uint256"
                                                                }
                                                            },
                                                            "src": "579:23:1",
                                                            "typeDescriptions": {
                                                                "typeIdentifier": "t_uint256",
                                                                "typeString": "uint256"
                                                            }
                                                        }
                                                    ],
                                                    "id": 54,
                                                    "isConstant": false,
                                                    "isInlineArray": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "nodeType": "TupleExpression",
                                                    "src": "578:25:1",
                                                    "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                    }
                                                },
                                                "src": "570:33:1",
                                                "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                }
                                            }
                                        ],
                                        "expression": {
                                            "argumentTypes": [
                                                {
                                                    "typeIdentifier": "t_address_payable",
                                                    "typeString": "address payable"
                                                },
                                                {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                }
                                            ],
                                            "id": 43,
                                            "name": "_mint",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 637,
                                            "src": "550:5:1",
                                            "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                                "typeString": "function (address,uint256)"
                                            }
                                        },
                                        "id": 56,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "550:54:1",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_tuple$__$",
                                            "typeString": "tuple()"
                                        }
                                    },
                                    "id": 57,
                                    "nodeType": "ExpressionStatement",
                                    "src": "550:54:1"
                                }
                            ]
                        },
                        "documentation": {
                            "id": 35,
                            "nodeType": "StructuredDocumentation",
                            "src": "406:83:1",
                            "text": " @dev Constructor that gives _msgSender() all of existing tokens."
                        },
                        "id": 59,
                        "implemented": true,
                        "kind": "constructor",
                        "modifiers": [
                            {
                                "arguments": [
                                    {
                                        "hexValue": "53696d706c65546f6b656e",
                                        "id": 38,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "514:13:1",
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_stringliteral_da035752f00a45fb4b10b269b9dcdc58efd98a12eda6b33da179acab837f7818",
                                            "typeString": "literal_string \"SimpleToken\""
                                        },
                                        "value": "SimpleToken"
                                    },
                                    {
                                        "hexValue": "53494d",
                                        "id": 39,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "529:5:1",
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_stringliteral_f6fc0e115f393f52de8a1783205484e2c47c0ae0af6904170edd370a74c376e8",
                                            "typeString": "literal_string \"SIM\""
                                        },
                                        "value": "SIM"
                                    },
                                    {
                                        "hexValue": "3138",
                                        "id": 40,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "536:2:1",
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_rational_18_by_1",
                                            "typeString": "int_const 18"
                                        },
                                        "value": "18"
                                    }
                                ],
                                "id": 41,
                                "modifierName": {
                                    "id": 37,
                                    "name": "ERC20",
                                    "nodeType": "IdentifierPath",
                                    "referencedDeclaration": 761,
                                    "src": "508:5:1"
                                },
                                "nodeType": "ModifierInvocation",
                                "src": "508:31:1"
                            }
                        ],
                        "name": "",
                        "nodeType": "FunctionDefinition",
                        "parameters": {
                            "id": 36,
                            "nodeType": "ParameterList",
                            "parameters": [],
                            "src": "505:2:1"
                        },
                        "returnParameters": {
                            "id": 42,
                            "nodeType": "ParameterList",
                            "parameters": [],
                            "src": "540:0:1"
                        },
                        "scope": 60,
                        "src": "494:117:1",
                        "stateMutability": "nonpayable",
                        "virtual": false,
                        "visibility": "public"
                    }
                ],
                "scope": 61,
                "src": "361:252:1"
            }
        ],
        "src": "33:581:1"
    },
    "functionHashes": {
        "allowance(address,address)": "dd62ed3e",
        "approve(address,uint256)": "095ea7b3",
        "balanceOf(address)": "70a08231",
        "decimals()": "313ce567",
        "decreaseAllowance(address,uint256)": "a457c2d7",
        "increaseAllowance(address,uint256)": "39509351",
        "name()": "06fdde03",
        "symbol()": "95d89b41",
        "totalSupply()": "18160ddd",
        "transfer(address,uint256)": "a9059cbb",
        "transferFrom(address,address,uint256)": "23b872dd"
    },
    "gasEstimates": {
        "creation": {
            "codeDepositCost": "508200",
            "executionCost": "infinite",
            "totalCost": "infinite"
        },
        "external": {
            "allowance(address,address)": "infinite",
            "approve(address,uint256)": "22606",
            "balanceOf(address)": "infinite",
            "decimals()": "1135",
            "decreaseAllowance(address,uint256)": "infinite",
            "increaseAllowance(address,uint256)": "infinite",
            "name()": "infinite",
            "symbol()": "infinite",
            "totalSupply()": "1073",
            "transfer(address,uint256)": "infinite",
            "transferFrom(address,address,uint256)": "infinite"
        }
    }
}